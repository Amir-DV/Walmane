const {
  SlashCommandBuilder,
  ChatInputCommandInteraction,
  PermissionFlagsBits,
  Client,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require("discord.js");

const { GoogleSpreadsheet } = require("google-spreadsheet");
const { JWT } = require("google-auth-library");

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: "walmanesheet@optimal-tide-371213.iam.gserviceaccount.com",
  key: "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCizLBQXhGsgJBn\nnvBy1gHNpH1BR6nYTHOK7u8TY6LEJyu9Zjo/QG0Z+eLMnyhp9E9+7UQkyPcev+fO\n7RTkBPvPDuO9Yen5f7mdZkIZdL9ZNzKprMgAYFPYw7Rd2BbBCQ/3uiXaVWItjPnF\n/IEX4RB0i/9yp+kSyIoetbMOWZ3LSi6SdKojp+CJWhfrLRH/osAs469g6IrY+i2z\nX1GhL3v1rdJSw/qBW0XR9ASA0me3Pa9iv84pCkFTwEGQMgJNVvB5HScBWpWQEClh\nsv1591h7usYmvFr0ZT2Xb2qzoSMqx7uaf5vhHeknGnz/91k1qvd1DJQyJVJ4USuQ\n4eNWERQxAgMBAAECggEAELC1PUINpA6or1ToQA+wbuOnmz0UfLpGyLY7ALUA64T8\nCx57R3+Mh+KaZcHF8Anl6gR7bV2El0yToH9mGkPoCHf1cXWjugpmDkzc5zT0xpnd\n+e7+sKovgmw69jmIiKkMD+jPx2jkSDj5JPsAhaETca1mJpwwDRbN8TzN0wFtR9lk\n24tDOkLcqExdUqoY6P5olEKqdchy1YOdaqFBa1Td/mfeEsqV9Q10NZgnOARmvGjG\nQS1BSaoBHceCYILBl86/WsIBKT1Jn1ILkC5bl/Iw1pJcUHqRaHKT0Vidu+DD5jIb\n99Vap8dyG+uoiBIiR7DqR34ru3Wbquw3WhOikgwruQKBgQDQPjL/HWsA/EDWCtMn\nhhSCcF/dPIQVn2Rn4f4+Jm26n/ekhs2o6ARg3UuvVvEBie6mviPquiOa0K4/UX2F\nHxBgbG9lEJ7cRoHwkjZT+M6BdpMAE8WwwrhOaWvOkOJqSvr/M47lAGKZP0sjYxIm\n11Ml5tQyO5/kcfGM8CLK5NooeQKBgQDIIonyLaBuXTzIT+Mhm/HJ0ygxPujsWd+U\nBO8EXACxAxzUiGqOq6ypH/I7rTjAcTIlgIf2bhDe4c4jmiYKyao030WRKTdUqCaV\nztP07eyOnff3HfIv+4YvMrjgE22d+KCc4A2U3zG6CHs/UGP2NT417aDrj988NyNz\nlLsNFLzLeQKBgH+8J3vlh6VrFjo1GaC81gfM9oC2hi7dPrGaJmHpIJXBWh5Jsg1R\nhJ4GIE7Ffb/746/UIiPxWbW1G60rR1tI2rrKyOmtcESd20a96SVJESLIoRMDDdiH\nGJbAg6iJpticdank7ln6CoEGGgjy1EeO/SnalX7apBF08z4Ibs8V4dvBAoGBAL6w\niheCedYuaHfEBnpDiAHxe95QPsbUaz8x5DuXHeGLQbEPudfuozkSA0/xIJ3cPReW\ne/XFsbVsGWm6unyU4eQ2yKYjS2ESRpF+3F4HRNoukdGXaudlFNlrztNSL6PQ/df7\nc3VhpJPI+QW+p0A0Qu5HWIiaMO3C67h5AjDYjXqhAoGBAM+f0HmqSP9ZjY5izzsE\nrt3YQ5QBKCFsOt21blOY9P0oJRJMObWytsL24u5Ytrtiy9GARCIJUj69D3Sva5rL\n7vGj+onGQZJgacNZGvQhc03T/XgdF1ivt5X7FV5VtM4CvggfWlLN0OANiOXEnRM3\nglQgUiOPvN2D0vE6YcRg04Bq\n-----END PRIVATE KEY-----\n",
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});
const doc = new GoogleSpreadsheet(
  "1Y48exFu2csCHsNyLHyxL6blKNLaulhMvuP57U69PQNQ",
  serviceAccountAuth
);

const panelDB = require("../../Models/panel");

// panel launch with true / false sticky
// if its false nothing happens
// if its true the channel id is saved in db.
// then when ever a new message is updated , it will check if its in thost channel ids for sticky.
// if it is , then it will find the previous message of the bot that has a specific footer ( org id ) ,
// and it will delete it and will send that panel again from the sheet
module.exports = {
  data: new SlashCommandBuilder()
    .setName("panel")
    .setDescription("Will setup a panel with various personalized functions")
    .setDefaultMemberPermissions(PermissionFlagsBits.ManageMessages)
    .setDMPermission(false)
    .addSubcommand((subcommand) =>
      subcommand
        .setName("setup")
        .setDescription("Will send your own panel setup to the channel")
        .addBooleanOption((sticky) =>
          sticky
            .setName("sticky")
            .setDescription("If you wanna set it as sticky message.")
            .setRequired(true)
        )
    ),

  /**
   * @param {ChatInputCommandInteraction} interaction
   * @param {Client} client
   */

  async execute(interaction, client) {
    await interaction.deferReply();

    const subcommand = interaction.options.getSubcommand();
    const Organizer = interaction.user;
    const fetchedOrganizer = await interaction.guild.members.fetch(
      Organizer.id
    );

    if (!fetchedOrganizer.roles.cache.has("1073644571843637379"))
      return interaction.followUp({
        embeds: [
          new EmbedBuilder()
            .setColor("DarkBlue")
            .setDescription("You are not a featured organizer hehe"),
        ],
        ephemeral: true,
      });

    await doc.loadInfo();
    const featuredSheet = doc.sheetsById[1883244075];
    await featuredSheet.loadCells("A1:M30");
    const Columns = [
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
    ];

    if (subcommand === "setup") {
      const stickyStatus = interaction.options.getBoolean("sticky");
      let columnNum;
      let orgID;
      for (let i = 0; i < 12; i++) {
        const organizerData = featuredSheet.getCellByA1(`${Columns[i]}2`).value;
        const organizerdataSplit = organizerData.split("-");
        orgID = organizerdataSplit[1];
        columnNum = i;
        if (orgID === interaction.user.id) break;
      }

      const embedPanel = new EmbedBuilder()
        .setTitle(
          `${featuredSheet.getCellByA1(`${Columns[columnNum]}3`).value}`
        )
        .setDescription(
          `${featuredSheet.getCellByA1(`${Columns[columnNum]}4`).value}`
        )
        .setFooter({ text: `${interaction.user.id}` });

      let Row = new ActionRowBuilder();
      let c = 1;
      for (let e = 6; e <= 13; ) {
        const buttonName = featuredSheet.getCellByA1(
          `${Columns[columnNum]}${e}`
        ).value;
        e++;
        const buttonData = featuredSheet.getCellByA1(
          `${Columns[columnNum]}${e}`
        ).value;

        if (buttonName && buttonData) {
          Row.addComponents(
            new ButtonBuilder()
              .setCustomId(
                `${buttonName.replace(/\s+/g, "").toLowerCase()}_${orgID}_${c}`
              )
              .setLabel(`${buttonName}`)
              .setStyle(ButtonStyle.Primary)
          );
        }
        c++;
        e++;
      }

      interaction.followUp({
        embeds: [embedPanel],
        components: [Row],
        ephemeral: false,
      });

      if (stickyStatus === true) {
        await panelDB.findOneAndUpdate(
          {
            guildID: interaction.guild.id,
          }, // Query condition
          {
            $addToSet: {
              stickyChannelIds: `${interaction.channel.id}`,
            },
          }, // Update operation
          {
            new: true,
            upsert: true,
          } // Return updated document and create if not found
        );
      } else if (stickyStatus === false) {
        await panelDB.findOneAndUpdate(
          {
            guildID: interaction.guild.id,
          }, // Query condition
          {
            $pull: {
              stickyChannelIds: interaction.channel.id,
            },
          }, // Update operation to remove the specified channel ID
          {
            new: true,
          } // Return the updated document
        );
      }
    }
  },
};
